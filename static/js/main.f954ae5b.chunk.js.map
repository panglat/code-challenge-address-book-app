{"version":3,"sources":["store/users/actions.js","store/settings/actionTypes.js","store/users/actionTypes.js","components/base-components/Header/index.js","components/base-components/Main/index.js","components/app-components/NavBar/index.js","components/App/index.js","store/users/reducer.js","store/settings/reducer.js","store/rootReducer.js","utils/api/RandomUserAPI.js","services/UserService.js","store/users/sagas.js","store/rootSaga.js","store/configureStore.js","index.js"],"names":["requestUsers","params","type","USERS_FETCH_REQUESTED","payload","requestUsersSuccess","response","USERS_FETCH_SUCCEEDED","requestUsersError","error","USERS_FETCH_FAILED","setUsersRecordsToDisplay","records","SET_USERS_RECORD_TO_DISPLAY","resetUsersError","RESET_USERS_FETCH_FAILED","clearUsersList","CLEAR_USERS_LIST","setUserSearch","userSearch","SET_USERS_SEARCH","SET_NATIONALITY_SEARCH","Header","children","className","defaultProps","Main","NavBar","cn","exact","activeClassName","to","Users","lazy","Settings","App","store","fallback","path","initialState","recordsToDisplay","loading","userList","nationalitySearch","combineReducers","users","state","action","settings","RandomUserAPI","axios","create","baseURL","getUserList","a","listLength","nationalities","get","results","nat","data","console","log","fetchUsers","watchFetchUsers","sagas","call","result","put","message","takeLatest","all","rootSaga","userSagas","map","spawn","sagaMiddleware","createSagaMiddleware","composeEnhancers","composeWithDevTools","createStore","rootReducer","applyMiddleware","run","configureStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f954ae5b.chunk.js","sourcesContent":["/**\r\n * @file Manages User Redux actions.\r\n * @module redux-store/users/Selectors\r\n */\r\nimport {\r\n  USERS_FETCH_REQUESTED,\r\n  USERS_FETCH_SUCCEEDED,\r\n  USERS_FETCH_FAILED,\r\n  SET_USERS_RECORD_TO_DISPLAY,\r\n  RESET_USERS_FETCH_FAILED,\r\n  SET_USERS_SEARCH,\r\n  CLEAR_USERS_LIST,\r\n} from './actionTypes';\r\n\r\n/**\r\n * @function\r\n * @description Request users list.\r\n * @param {getUserListParams} params getUserList api parameters.\r\n */\r\nexport const requestUsers = (params) => ({\r\n  type: USERS_FETCH_REQUESTED,\r\n  payload: { params },\r\n});\r\n\r\n/**\r\n * @function\r\n * @description Request users list success.\r\n * @param {response} response getUserList parameters.\r\n */\r\nexport const requestUsersSuccess = (response) => ({\r\n  type: USERS_FETCH_SUCCEEDED,\r\n  payload: { response },\r\n});\r\n\r\n/**\r\n * @function\r\n * @description Request users list failed.\r\n * @param {error} error request error.\r\n */\r\nexport const requestUsersError = (error) => ({\r\n  type: USERS_FETCH_FAILED,\r\n  payload: { error },\r\n});\r\n\r\n/**\r\n * @function\r\n * @description Set the number of records to display in the users list\r\n * @param {number} records number of records\r\n */\r\nexport const setUsersRecordsToDisplay = (records) => ({\r\n  type: SET_USERS_RECORD_TO_DISPLAY,\r\n  payload: { records },\r\n});\r\n\r\n/**\r\n * @function\r\n * @description Reset user request error\r\n */\r\nexport const resetUsersError = () => ({\r\n  type: RESET_USERS_FETCH_FAILED,\r\n  payload: {},\r\n});\r\n\r\n/**\r\n * @function\r\n * @description Clear users list\r\n */\r\nexport const clearUsersList = () => ({\r\n  type: CLEAR_USERS_LIST,\r\n  payload: {},\r\n});\r\n\r\n/**\r\n * @function\r\n * @description Set user search\r\n * @param {string} userSearch user search\r\n */\r\nexport const setUserSearch = (userSearch) => ({\r\n  type: SET_USERS_SEARCH,\r\n  payload: { userSearch },\r\n});\r\n","/**\r\n * @file Manages Settings Redux action types.\r\n * @module redux-store/settings/ActionTypes\r\n */\r\n\r\n/**\r\n * @constant {string} SET_NATIONALITY_SEARCH set nationality search.\r\n */\r\nexport const SET_NATIONALITY_SEARCH = 'SET_NATIONALITY_SEARCH';\r\n","/**\r\n * @file Manages User Redux action types.\r\n * @module redux-store/users/ActionTypes\r\n */\r\n\r\n/**\r\n * @constant {string} USERS_FETCH_REQUESTED request users list\r\n */\r\nexport const USERS_FETCH_REQUESTED = 'USERS_FETCH_REQUESTED';\r\n\r\n/**\r\n * @constant {string} USERS_FETCH_SUCCEEDED Request users list success.\r\n */\r\nexport const USERS_FETCH_SUCCEEDED = 'USERS_FETCH_SUCCEEDED';\r\n/**\r\n * @constant {string} USERS_FETCH_SUCCEEDED Request users list failed.\r\n */\r\nexport const USERS_FETCH_FAILED = 'USERS_FETCH_FAILED';\r\n/**\r\n * @constant {string} SET_USERS_RECORD_TO_DISPLAY Set the number of records to display in\r\n * the users list.\r\n */\r\nexport const SET_USERS_RECORD_TO_DISPLAY = 'SET_USERS_RECORD_TO_DISPLAY';\r\n/**\r\n * @constant {string} RESET_USERS_FETCH_FAILED Reset user request error.\r\n */\r\nexport const RESET_USERS_FETCH_FAILED = 'RESET_USERS_FETCH_FAILED';\r\n/**\r\n * @constant {string} CLEAR_USERS_LIST Clear users list.\r\n */\r\nexport const CLEAR_USERS_LIST = 'CLEAR_USERS_LIST';\r\n/**\r\n * @constant {string} SET_USERS_SEARCH Set user search\r\n */\r\nexport const SET_USERS_SEARCH = 'SET_USERS_SEARCH';\r\n","/**\r\n * @file Render an html header element.\r\n * @module base-components/Header\r\n */\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './styles.scss';\r\n\r\nconst Header = ({ children }) => (\r\n  <header className=\"header\">\r\n    {children}\r\n  </header>\r\n);\r\n\r\nHeader.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n\r\nHeader.defaultProps = {\r\n  children: null,\r\n};\r\n\r\nexport default Header;\r\n","\r\n/**\r\n * @file Render an html main element.\r\n * @module base-components/Main\r\n */\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './styles.scss';\r\n\r\nconst Main = ({ children }) => (\r\n  <main className=\"main\">\r\n    {children}\r\n  </main>\r\n);\r\n\r\nMain.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n\r\nMain.defaultProps = {\r\n  children: null,\r\n};\r\n\r\nexport default Main;\r\n","/**\r\n * @file Render the navigation bar.\r\n * @module app-components/NavBar\r\n */\r\n\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport cn from 'classnames';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport './styles.scss';\r\n\r\nconst NavBar = ({ className }) => (\r\n  <ul className={cn('nav-bar', className)}>\r\n    <li className=\"nav-bar__item\">\r\n      <NavLink\r\n        className=\"nav-bar__item-link\"\r\n        exact\r\n        activeClassName=\"nav-bar__item-link--active\"\r\n        to=\"/\"\r\n      >\r\n        Home\r\n      </NavLink>\r\n    </li>\r\n    <li className=\"nav-bar__item\">\r\n      <NavLink\r\n        className=\"nav-bar__item-link\"\r\n        activeClassName=\"nav-bar__item-link--active\"\r\n        to=\"/settings\"\r\n      >\r\n        Settings\r\n      </NavLink>\r\n    </li>\r\n  </ul>\r\n);\r\n\r\nNavBar.propTypes = {\r\n  className: PropTypes.string,\r\n};\r\n\r\nNavBar.defaultProps = {\r\n  className: '',\r\n};\r\n\r\nexport default NavBar;\r\n","/**\r\n * @module App\r\n */\r\nimport React, { Suspense, lazy } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\n\r\nimport Header from '../base-components/Header';\r\nimport Main from '../base-components/Main';\r\n\r\nimport NavBar from '../app-components/NavBar';\r\n\r\nimport './styles.scss';\r\n\r\n// Code Splitting\r\nconst Users = lazy(() => import(/* webpackPrefetch: true */ '../app-components/Users'));\r\nconst Settings = lazy(() => import(/* webpackPrefetch: true */ '../app-components/Settings'));\r\n\r\n/**\r\n *  Render the app.\r\n * @param {*} store redux store\r\n */\r\nconst App = ({ store }) => (\r\n  <Provider store={store}>\r\n    <Router>\r\n      <Suspense fallback={<div>Loading...</div>}>\r\n        <Header>\r\n          <NavBar />\r\n        </Header>\r\n        <Switch>\r\n          <Route path=\"/settings\">\r\n            <Main>\r\n              <Settings />\r\n            </Main>\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <Main>\r\n              <Users />\r\n            </Main>\r\n          </Route>\r\n        </Switch>\r\n      </Suspense>\r\n    </Router>\r\n  </Provider>\r\n);\r\n\r\nApp.propTypes = {\r\n  store: PropTypes.shape({}),\r\n};\r\n\r\nApp.defaultProps = {\r\n  store: null,\r\n};\r\n\r\nexport default App;\r\n","/**\r\n * @file Manages Users Redux reducer.\r\n * @module redux-store/users/Reducer\r\n */\r\n\r\nimport {\r\n  USERS_FETCH_REQUESTED,\r\n  USERS_FETCH_SUCCEEDED,\r\n  USERS_FETCH_FAILED,\r\n  SET_USERS_RECORD_TO_DISPLAY,\r\n  RESET_USERS_FETCH_FAILED,\r\n  SET_USERS_SEARCH,\r\n  CLEAR_USERS_LIST,\r\n} from './actionTypes';\r\n\r\nconst initialState = {\r\n  recordsToDisplay: 0,\r\n  loading: false,\r\n  error: null,\r\n  userList: [],\r\n  userSearch: '',\r\n};\r\n\r\n/**\r\n * @function\r\n * @description Users reducer\r\n */\r\nexport default function reducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case USERS_FETCH_REQUESTED:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n      };\r\n\r\n    case USERS_FETCH_SUCCEEDED:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        error: null,\r\n        userList: [...state.userList, ...action.payload.response],\r\n      };\r\n\r\n    case USERS_FETCH_FAILED:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        error: action.payload.error,\r\n      };\r\n\r\n    case SET_USERS_RECORD_TO_DISPLAY:\r\n      return {\r\n        ...state,\r\n        recordsToDisplay: action.payload.records,\r\n      };\r\n\r\n    case RESET_USERS_FETCH_FAILED:\r\n      return {\r\n        ...state,\r\n        error: null,\r\n      };\r\n\r\n    case CLEAR_USERS_LIST:\r\n      return {\r\n        ...state,\r\n        userList: [],\r\n      };\r\n\r\n    case SET_USERS_SEARCH:\r\n      return {\r\n        ...state,\r\n        userSearch: action.payload.userSearch,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","/**\r\n * @file Manages Settings Redux reducer.\r\n * @module redux-store/settings/Reducer\r\n */\r\n\r\nimport { SET_NATIONALITY_SEARCH } from './actionTypes';\r\n\r\nconst initialState = {\r\n  nationalitySearch: [],\r\n};\r\n\r\n/**\r\n * @function\r\n * @description Settings Redux reducer.\r\n */\r\nexport default function reducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case SET_NATIONALITY_SEARCH:\r\n      return {\r\n        ...state,\r\n        nationalitySearch: action.payload.nationalitySearch,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","/**\r\n * @file Redux root reducer.\r\n * @module redux/rootReducer\r\n */\r\nimport { combineReducers } from 'redux';\r\nimport users from './users/reducer';\r\nimport settings from './settings/reducer';\r\n\r\nexport default combineReducers({\r\n  users,\r\n  settings,\r\n});\r\n","/**\r\n * @file Generate an Axios instance for http://randomuser.me\r\n * @module util/api/RandomUserAPI\r\n */\r\nimport axios from 'axios';\r\n/**\r\n * @constant {AxiosStatic} RandomUserAPI Axios instance for http://randomuser.me.\r\n */\r\nconst RandomUserAPI = axios.create({\r\n  baseURL: 'https://randomuser.me/api/',\r\n});\r\n\r\nexport default RandomUserAPI;\r\n","/**\r\n * @file Manages user requests.\r\n * @module services/UserService\r\n */\r\nimport RandomUserAPI from '../utils/api/RandomUserAPI';\r\n\r\n/**\r\n * @constant {number} DEFAULT_USER_LIST_LENGTH the default number of records to get from the\r\n * users list\r\n */\r\nconst DEFAULT_USER_LIST_LENGTH = 10;\r\n\r\n/**\r\n * @typedef getUserListParams\r\n * @property {number} listLength number of records to be gotten.s\r\n * @property {string|null} params.nationalities comma-separated nationality list.\r\n */\r\n\r\n/**\r\n * @function\r\n * @async\r\n * @description Get users list\r\n * @param {getUserListParams} params parameters object.\r\n */\r\nexport const getUserList = async (\r\n  params = {\r\n    listLength: DEFAULT_USER_LIST_LENGTH,\r\n    nationalities: null,\r\n  },\r\n) => {\r\n  try {\r\n    const response = await RandomUserAPI.get('', {\r\n      params: {\r\n        results: params.listLength,\r\n        nat: params.nationalities,\r\n      },\r\n    });\r\n    return response.data.results;\r\n  } catch (err) {\r\n    // eslint-disable-next-line no-console\r\n    console.log(err);\r\n    throw err;\r\n  }\r\n};\r\n","/**\r\n * @file Manages Users redux-saga\r\n * @module redux-store/users/saga\r\n */\r\nimport {\r\n  call, put, takeLatest, all,\r\n} from 'redux-saga/effects';\r\nimport { USERS_FETCH_REQUESTED } from './actionTypes';\r\nimport { requestUsersSuccess, requestUsersError } from './actions';\r\nimport { getUserList } from '../../services/UserService';\r\n\r\n/**\r\n * @generator\r\n * @description trigger getUserList API call.\r\n * @param {string} action action reference to access to action payload.\r\n */\r\nfunction* fetchUsers(action) {\r\n  try {\r\n    const result = yield call(() => getUserList(action.payload.params));\r\n    yield put(requestUsersSuccess(result));\r\n  } catch (e) {\r\n    yield put(requestUsersError(e.message));\r\n  }\r\n}\r\n/**\r\n * @generator\r\n * @description watches for all USERS_FETCH_REQUESTED actions.\r\n */\r\nfunction* watchFetchUsers() {\r\n  yield takeLatest(USERS_FETCH_REQUESTED, fetchUsers);\r\n}\r\n\r\n/**\r\n * @generator\r\n * @description export the rootSaga single entry point to start all Sagas at once.\r\n */\r\nexport default function* sagas() {\r\n  yield all([watchFetchUsers()]);\r\n}\r\n","/**\r\n * @file Redux Root Saga.\r\n * @module redux/rootSaga\r\n */\r\nimport { all, spawn } from 'redux-saga/effects';\r\nimport userSagas from './users/sagas';\r\n\r\n/**\r\n * @generator\r\n * @description aggregate multiple Sagas to a single entry point for the sagaMiddleware to run.\r\n * It uses *spawn* which is an effect that will disconnect your child saga from its parent,\r\n * allowing it to fail without crashing it's parent.\r\n */\r\nexport default function* rootSaga() {\r\n  yield all([\r\n    userSagas,\r\n  ].map(spawn));\r\n}\r\n","/**\r\n * @file Configure a redux store.\r\n * @module redux/configureStore\r\n */\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport createSagaMiddleware from 'redux-saga';\r\n\r\nimport rootReducer from './rootReducer';\r\nimport rootSaga from './rootSaga';\r\n\r\n// create the saga middleware\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\n/**\r\n * Configure a Redux store.\r\n * @function\r\n */\r\nexport default function configureStore(preloadedState = {}) {\r\n  const composeEnhancers = composeWithDevTools({\r\n    // Specify name here, actionsBlacklist, actionsCreators and other options if needed\r\n  });\r\n\r\n  // mount it on the Store\r\n  const store = createStore(rootReducer, composeEnhancers(applyMiddleware(sagaMiddleware)));\r\n\r\n  // then run the saga\r\n  sagaMiddleware.run(rootSaga);\r\n  return store;\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './components/App';\r\nimport configureStore from './store/configureStore';\r\n\r\nconst store = configureStore();\r\n\r\nReactDOM.render(<App store={store} />, document.getElementById('root'));\r\n"],"sourceRoot":""}